digraph "classes" {
rankdir=BT
charset="utf-8"
"AI.torch_activation_functions.ActivationFunctions" [color="black", fontcolor="black", label=<{ActivationFunctions|<br ALIGN="LEFT"/>|abs(x)<br ALIGN="LEFT"/>arctan(x)<br ALIGN="LEFT"/>brain_sigmoid(x)<br ALIGN="LEFT"/>clipped_relu(x, relu_clip_at)<br ALIGN="LEFT"/>get_activation_functions()<br ALIGN="LEFT"/>identity(x)<br ALIGN="LEFT"/>leaky_relu(x)<br ALIGN="LEFT"/>relu(x)<br ALIGN="LEFT"/>sigmoid(x)<br ALIGN="LEFT"/>softplus(x)<br ALIGN="LEFT"/>softsign(x)<br ALIGN="LEFT"/>tanh(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.config.Config" [color="black", fontcolor="black", label=<{Config|parser : ConfigParser<br ALIGN="LEFT"/>|auto_type(value)<br ALIGN="LEFT"/>load_config(section)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.genes.ConnectionGene" [color="black", fontcolor="black", label=<{ConnectionGene|enabled : bool<br ALIGN="LEFT"/>from_neuron<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>innovation_number<br ALIGN="LEFT"/>to_neuron<br ALIGN="LEFT"/>weight<br ALIGN="LEFT"/>|copy(retain_innovation_number)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.genome.Genome" [color="black", fontcolor="black", label=<{Genome|connection_genes : dict<br ALIGN="LEFT"/>fitness : NoneType<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>network : NoneType<br ALIGN="LEFT"/>network_needs_rebuild : bool<br ALIGN="LEFT"/>neuron_genes : dict<br ALIGN="LEFT"/>species_id : NoneType<br ALIGN="LEFT"/>|add_neurons(layer, count, neuron_ids)<br ALIGN="LEFT"/>attempt_connections(from_layer, to_layer, attempts)<br ALIGN="LEFT"/>calculate_genetic_distance(other_genome)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>create(input_ids, output_ids, hidden_ids)<br ALIGN="LEFT"/>crossover(other_genome)<br ALIGN="LEFT"/>mutate()<br ALIGN="LEFT"/>mutate_activation_function()<br ALIGN="LEFT"/>mutate_add_connection()<br ALIGN="LEFT"/>mutate_add_neuron()<br ALIGN="LEFT"/>mutate_bias()<br ALIGN="LEFT"/>mutate_connection_toggle()<br ALIGN="LEFT"/>mutate_neuron_toggle()<br ALIGN="LEFT"/>mutate_weight()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.managers.IdManager" [color="black", fontcolor="black", label=<{IdManager|current_id<br ALIGN="LEFT"/>|get_new_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.managers.InnovationManager" [color="black", fontcolor="black", label=<{InnovationManager|current_innovation<br ALIGN="LEFT"/>|get_new_innovation_number()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.neural_network.NeuralNetwork" [color="black", fontcolor="black", label=<{NeuralNetwork|connections : dict<br ALIGN="LEFT"/>hidden_indices : dict<br ALIGN="LEFT"/>hidden_states : NoneType<br ALIGN="LEFT"/>input_indices<br ALIGN="LEFT"/>neurons : dict<br ALIGN="LEFT"/>output_indices<br ALIGN="LEFT"/>|build_network(genome)<br ALIGN="LEFT"/>propagate(input_values)<br ALIGN="LEFT"/>reset_hidden_states()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.genes.NeuronGene" [color="black", fontcolor="black", label=<{NeuronGene|activation : NoneType<br ALIGN="LEFT"/>bias : NoneType, int<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>layer<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.population_and_species.Population" [color="black", fontcolor="black", label=<{Population|best_genome : NoneType<br ALIGN="LEFT"/>environment : EnvCompatibility, NoneType, TimeLimit<br ALIGN="LEFT"/>genomes : dict<br ALIGN="LEFT"/>hidden_ids<br ALIGN="LEFT"/>initial_observation : tuple<br ALIGN="LEFT"/>input_ids<br ALIGN="LEFT"/>max_fitness : NoneType<br ALIGN="LEFT"/>output_ids<br ALIGN="LEFT"/>species : dict<br ALIGN="LEFT"/>|carry_over_elites(next_gen_genomes)<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/><I>evaluate_parallel</I>()<br ALIGN="LEFT"/>evaluate_serial()<br ALIGN="LEFT"/>evaluate_single_genome(genome)<br ALIGN="LEFT"/>evolve()<br ALIGN="LEFT"/>form_next_generation()<br ALIGN="LEFT"/>get_offspring_count(species_instance, needed_offspring)<br ALIGN="LEFT"/>load_genomes_from_file(file_path)<br ALIGN="LEFT"/>print_neuron_ids()<br ALIGN="LEFT"/>prune()<br ALIGN="LEFT"/>prune_genomes()<br ALIGN="LEFT"/>prune_stale_species()<br ALIGN="LEFT"/>prune_weak_species()<br ALIGN="LEFT"/>random_species()<br ALIGN="LEFT"/>relu_offset_fitness()<br ALIGN="LEFT"/>reproduce(next_gen_genomes)<br ALIGN="LEFT"/>save_genomes_to_file(file_path)<br ALIGN="LEFT"/>speciate()<br ALIGN="LEFT"/>stat_and_sort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"AI.population_and_species.Species" [color="black", fontcolor="black", label=<{Species|age : int<br ALIGN="LEFT"/>average_shared_fitness : NoneType<br ALIGN="LEFT"/>elites : dict<br ALIGN="LEFT"/>generations_without_improvement : int<br ALIGN="LEFT"/>genomes : dict<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>representative : NoneType<br ALIGN="LEFT"/>|add_genome(genome)<br ALIGN="LEFT"/>cull(keep_best_genomes_in_species)<br ALIGN="LEFT"/>is_same_species(genome)<br ALIGN="LEFT"/>produce_offspring(offspring_count)<br ALIGN="LEFT"/>random_genome()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
